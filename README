# 🛡 CryptoApp GUI

**CryptoApp GUI** es una aplicación escrita en Python que permite experimentar y trabajar con diversos mecanismos criptográficos modernos a través de una interfaz gráfica intuitiva. Es ideal tanto para entornos educativos como profesionales, facilitando tareas como:

- 🔐 Cifrado y descifrado simétrico y asimétrico.
- 🧾 Generación de HMAC y hash.
- ✍️ Firma digital y verificación.
- 🧬 Derivación segura de claves con sal (salt).

Su objetivo es acercar la criptografía práctica a estudiantes, analistas de ciberseguridad (Blue Team), desarrolladores y entusiastas que deseen proteger información sensible de forma accesible.

---

## ⚙ Requisitos del sistema

### 🐍 Python

- Python >= 3.10

### 📦 Dependencias

Instálalas con pip:

```bash
pip install pycryptodome cryptography pyperclip

▶ Ejecución
bash
Copiar
Editar
python "CryptoApp_GUI.py"
✳ Funcionalidades
🔒 Cifrado simétrico con AES (CBC/GCM), ChaCha20, ChaCha20-Poly1305

🔑 Cifrado asimétrico con RSA

✍️ Firma digital y verificación

🧾 Hashing con SHA-2 y SHA-3

🔏 HMAC

🧬 Derivación de claves (PBKDF2)

💾 Guardado y carga de claves

🧪 Ejemplos paso a paso
1. 🔐 Cifrado Simétrico con AES-CBC
Mensaje: La contraseña de acceso es 4fTu#92x!

Pasos:

Generate Key

Generate Nonce

Algoritmo: AES-CBC / Padding: PKCS7

Pulsar Encrypt

📸 [Insertar imagen: cifrado_aes.png]

2. 🔏 Generar HMAC con SHA256
Usamos el mismo mensaje original + la misma clave.

Pasos:

Pegar mensaje

Seleccionar sha256

Pulsar HMAC

📸 [Insertar imagen: hmac.png]

3. 🔑 Cifrado y Descifrado con RSA
Generate Key Pair → Guarda private_key.pem y public_key.pem

Mensaje: Este mensaje está cifrado con clave pública RSA.

Selecciona public_key.pem → Encrypt

Copia resultado y selecciona private_key.pem → Decrypt

📸 [Insertar imágenes: cifrado_rsa_encrypt.png, cifrado_rsa_decrypt.png]

4. 🧬 Derivación de claves con PBKDF2
Pasos:

Generate Master Key (256 bits)

Generate Salt

Derive Key

Opcional: Save Key / Load Key

📸 [Insertar imagen: gestion_claves.png]

💼 Casos de uso reales
Cifrado de mensajes confidenciales

Validación de integridad con HMAC

Protección de contraseñas con claves derivadas

Simulación de firmas digitales

Aprendizaje práctico de criptografía moderna

🙌 Agradecimientos
Gracias a Felipe de KeepCoding por su enseñanza en criptografía aplicada y por inspirar esta herramienta durante el curso.

👨‍💻 Autor
Daniel (@U7Dani)
GitHub: https://github.com/U7Dani



