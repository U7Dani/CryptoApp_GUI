# üõ° CryptoApp GUI

**CryptoApp GUI** es una aplicaci√≥n escrita en Python que permite experimentar y trabajar con diversos mecanismos criptogr√°ficos modernos a trav√©s de una interfaz gr√°fica intuitiva. Es ideal tanto para entornos educativos como profesionales, facilitando tareas como:

* Cifrado y descifrado sim√©trico y asim√©trico.
* Generaci√≥n de HMAC y hash.
* Firma digital y verificaci√≥n.
* Derivaci√≥n segura de claves con sal (salt).

Su objetivo es acercar la criptograf√≠a pr√°ctica a estudiantes, analistas de ciberseguridad (Blue Team), desarrolladores y entusiastas que deseen proteger informaci√≥n sensible de forma accesible.

---

## ‚öô Requisitos del sistema

### üêç Python

* Python >= 3.10

### üì¶ Dependencias

Inst√°lalas con pip:

```bash
pip install pycryptodome cryptography pyperclip
```

### ‚ñ∂ Ejecuci√≥n

```bash
python "CryptoApp_GUI.py"
```

---

## ‚ú≥ Funcionalidades

* Cifrado sim√©trico con AES (CBC/GCM), ChaCha20, ChaCha20-Poly1305
* Cifrado asim√©trico con RSA
* Firma digital y verificaci√≥n con clave p√∫blica
* Hashing con SHA-256, SHA-512, SHA3-256, SHA3-512
* HMAC
* Derivaci√≥n de claves mediante PBKDF2 + Salt
* Generaci√≥n y almacenamiento seguro de claves

---

## üß™ Ejemplos paso a paso

### 1. üîê Cifrado Sim√©trico con AES-CBC + PKCS7

**Objetivo:** Cifrar un mensaje con una clave generada y un nonce aleatorio.

#### Pasos:

* En "Cifrado Sim√©trico":

  * Escribe: `La contrase√±a de acceso es 4fTu#92x!`
  * Pulsa "Generate Key"
  * Pulsa "Generate Nonce"
  * Selecciona `AES-CBC` y `PKCS7`
  * Pulsa `Encrypt`

**Resultado:** Texto cifrado en base64

![Cifrado AES](img/cifrado_aes.png)

### 2. üîè HMAC con SHA256

**Objetivo:** Generar una firma HMAC para verificar integridad del mensaje original.

#### Pasos:

* En "Hashing y HMAC":

  * Pega el mismo mensaje: `La contrase√±a de acceso es 4fTu#92x!`
  * Usa la misma clave que en el paso anterior.
  * Selecciona `sha256`
  * Pulsa `HMAC`

**Resultado:** C√≥digo HMAC SHA256

![HMAC](img/hmac.png)

### 3. üîê Cifrado Asim√©trico RSA

**Objetivo:** Enviar un mensaje cifrado con clave p√∫blica, que solo puede ser descifrado con la clave privada.

#### Pasos:

1. Pulsa `Generate Key Pair` y guarda:

   * Clave privada: `private_key.pem`
   * Clave p√∫blica: `public_key.pem`

2. Escribe el mensaje:

```
Este mensaje est√° cifrado con clave p√∫blica RSA.
```

3. Selecciona el archivo `.pem` de la clave p√∫blica
4. Pulsa `Encrypt`
5. Copia el resultado cifrado
6. En el campo "Message", p√©galo
7. Selecciona `private_key.pem` y pulsa `Decrypt`

**Resultado:** El mensaje original descifrado correctamente

![Cifrado RSA](img/cifrado_rsa_encrypt.png)
![Descifrado RSA](img/cifrado_rsa_decrypt.png)

### 4. üß¨ Derivaci√≥n de claves seguras (PBKDF2)

**Objetivo:** Derivar una clave criptogr√°fica fuerte desde una clave maestra y una sal (salt).

#### Pasos:

1. En "Gesti√≥n de Claves":

   * Selecciona `Key Size`: 256
   * Pulsa `Generate Master Key`
   * Pulsa `Generate Salt`
   * Pulsa `Derive Key`

**Resultado:** Clave derivada lista para usar

![Gestor de Claves](img/gestion_claves.png)

#### üîê Guardar clave generada

* Pulsa `Save Key` para almacenar en `.key`
* Puedes cargarla luego con `Load Key`

---

## üíº Casos de uso reales

* Cifrado de mensajes y datos confidenciales
* Verificaci√≥n de integridad con HMAC
* Protecci√≥n de contrase√±as con derivaci√≥n PBKDF2
* Simulaci√≥n de env√≠o seguro usando RSA
* Aprendizaje y formaci√≥n en criptograf√≠a aplicada

---

## üôå Agradecimientos

Gracias a Felipe de KeepCoding por inspirar el desarrollo de esta herramienta durante el curso de Criptograf√≠a Aplicada. Esta aplicaci√≥n resume de forma pr√°ctica todos los conocimientos aprendidos.

---

## üîó Autor

**Daniel (@U7Dani)**
GitHub: [https://github.com/U7Dani](https://github.com/U7Dani)

---

> "La mejor forma de aprender criptograf√≠a es construyendo con ella."


